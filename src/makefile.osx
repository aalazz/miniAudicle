
ifneq ($(shell sw_vers -productVersion | egrep '10\.[678](\.[0-9]+)?'),)
SDK=$(shell xcodebuild -sdk macosx -version | grep '^Path:' | sed 's/Path: \(.*\)/\1/')
ISYSROOT=-isysroot $(SDK)
LINK_EXTRAS=-F/System/Library/PrivateFrameworks \
    -weak_framework MultitouchSupport
else
ISYSROOT=-isysroot /Developer/SDKs/MacOSX10.4u.sdk
LINK_EXTRAS=
endif

CHUCK_SRC_DIR=chuck/src
LANGUAGE=English

OSX_DIR=macosx
BIN_DIR=macosx
INSTALL_DIR=/Applications

# compilation/linking presets
CC=gcc
CXX=g++

ifneq ($(shell sw_vers -productVersion | egrep '10\.[78](\.[0-9]+)?'),)
CC=clang
CXX=clang++
endif

INCLUDES=-I$(CHUCK_SRC_DIR) -I$(OSX_DIR) -I.
CFLAGS=-D__MACOSX_CORE__ -c -DGCC_FAST_OBJC_DISPATCH $(INCLUDES)

FRAMEWORKS=Cocoa CoreAudio CoreMIDI CoreFoundation Carbon IOKit Security
LIBS=$(addprefix -framework ,$(FRAMEWORKS)) $(LINK_EXTRAS) -lstdc++ -lm
LDFLAGS=$(LIBS)

ARCHOPTS=$(addprefix -arch ,$(ARCHS))

SF_SRC=util_sndfile.c

ifneq ($(CHUCK_DEBUG),)
CFLAGS+= -g
else
CFLAGS+= -O3
endif

ifneq ($(CHUCK_STRICT),)
CFLAGS+= -Wall
endif

ifneq ($(filter SPENCER,$(MA_SPECIAL)),)
CFLAGS+= -DSPENCER
FRAMEWORKS+=QuartzCore
endif

#-----------------------------------------------------------------------------
# by default, ChucK uses a pre-configured libsndfile...
# uncomment the next 3 lines to use libsndfile on your system
#-----------------------------------------------------------------------------
#CFLAGS+= -D__CK_SNDFILE_NATIVE__
#LIBS+= -lsndfile
#SF_SRC=

CFLAGSDEPEND?=$(patsubst -arch %,,$(CFLAGS))

# distribution target presets
VERSION?=0.2.2c

DIST_DIR=miniAudicle-$(VERSION)

NOTES_DIR=../notes
NOTES=COPYING LGPL INSTALL BUGS VERSIONS
NOTES:=$(addprefix $(NOTES_DIR)/,$(NOTES))

DOC_DIR=../docs/web
DOCS=index.html maui_api.html miniAudicle.css
DOCS:=$(addprefix $(DOC_DIR)/,$(DOCS))

DOC_IMAGE_DIR=../docs/web/images
DOC_IMAGES=$(wildcard $(DOC_IMAGE_DIR)/*)

EXAMPLES_DIR=../test
EXAMPLES=slide01.ck slide02.ck slide03.ck led01.ck view01.ck mand-o-ui.ck \
         mode-o-ui.ck gauge01.ck gauge02.ck
EXAMPLES:=$(addprefix $(EXAMPLES_DIR)/,$(EXAMPLES))

CHUCK_FULL_SRC_DIR=../../chuck/trunk/src
CHUCK_MANUAL_DIR=$(CHUCK_FULL_SRC_DIR)/../doc/manual
CHUCK_MANUAL=$(CHUCK_MANUAL_DIR)/ChucK_manual.pdf

CHUCK_CSRCS= $(CHUCK_SRC_DIR)/util_math.c $(CHUCK_SRC_DIR)/util_network.c \
    $(CHUCK_SRC_DIR)/util_raw.c $(CHUCK_SRC_DIR)/util_xforms.c \
    $(CHUCK_SRC_DIR)/$(SF_SRC)

CHUCK_CXXSRCS= $(CHUCK_SRC_DIR)/chuck_absyn.cpp $(CHUCK_SRC_DIR)/chuck_parse.cpp \
	$(CHUCK_SRC_DIR)/chuck_errmsg.cpp $(CHUCK_SRC_DIR)/chuck_frame.cpp \
	$(CHUCK_SRC_DIR)/chuck_symbol.cpp $(CHUCK_SRC_DIR)/chuck_table.cpp \
	$(CHUCK_SRC_DIR)/chuck_utils.cpp $(CHUCK_SRC_DIR)/chuck_vm.cpp \
	$(CHUCK_SRC_DIR)/chuck_instr.cpp $(CHUCK_SRC_DIR)/chuck_scan.cpp \
	$(CHUCK_SRC_DIR)/chuck_type.cpp $(CHUCK_SRC_DIR)/chuck_emit.cpp \
	$(CHUCK_SRC_DIR)/chuck_compile.cpp $(CHUCK_SRC_DIR)/chuck_dl.cpp \
	$(CHUCK_SRC_DIR)/chuck_oo.cpp $(CHUCK_SRC_DIR)/chuck_lang.cpp \
	$(CHUCK_SRC_DIR)/chuck_ugen.cpp $(CHUCK_SRC_DIR)/chuck_globals.cpp \
	$(CHUCK_SRC_DIR)/chuck_otf.cpp $(CHUCK_SRC_DIR)/chuck_stats.cpp \
	$(CHUCK_SRC_DIR)/chuck_bbq.cpp $(CHUCK_SRC_DIR)/chuck_shell.cpp \
	$(CHUCK_SRC_DIR)/chuck_console.cpp $(CHUCK_SRC_DIR)/digiio_rtaudio.cpp \
	$(CHUCK_SRC_DIR)/hidio_sdl.cpp \
	$(CHUCK_SRC_DIR)/midiio_rtmidi.cpp $(CHUCK_SRC_DIR)/RtAudio/RtAudio.cpp \
	$(CHUCK_SRC_DIR)/rtmidi.cpp $(CHUCK_SRC_DIR)/ugen_osc.cpp \
	$(CHUCK_SRC_DIR)/ugen_filter.cpp $(CHUCK_SRC_DIR)/ugen_stk.cpp \
	$(CHUCK_SRC_DIR)/ugen_xxx.cpp \
	$(CHUCK_SRC_DIR)/uana_extract.cpp $(CHUCK_SRC_DIR)/uana_xform.cpp \
	$(CHUCK_SRC_DIR)/ulib_machine.cpp $(CHUCK_SRC_DIR)/ulib_math.cpp \
	$(CHUCK_SRC_DIR)/ulib_std.cpp $(CHUCK_SRC_DIR)/ulib_opsc.cpp \
	$(CHUCK_SRC_DIR)/util_buffers.cpp $(CHUCK_SRC_DIR)/util_console.cpp \
	$(CHUCK_SRC_DIR)/util_string.cpp \
	$(CHUCK_SRC_DIR)/util_thread.cpp \
	$(CHUCK_SRC_DIR)/util_opsc.cpp $(CHUCK_SRC_DIR)/util_hid.cpp

CHUCK_COBJS=$(CHUCK_CSRCS:.c=.o)
CHUCK_CXXOBJS=$(CHUCK_CXXSRCS:.cpp=.o)
CHUCK_OBJS+=$(CHUCK_COBJS) $(CHUCK_CXXOBJS) \
    $(CHUCK_SRC_DIR)/chuck.tab.o $(CHUCK_SRC_DIR)/chuck.yy.o

CSRCS+= 
CXXSRCS+= miniAudicle.cpp \
    miniAudicle_shell.cpp \
	miniAudicle_import.cpp \
    miniAudicle_ui_elements.cpp
OBJCSRCS+= $(OSX_DIR)/main.m \
    $(OSX_DIR)/BLAuthentication.m
OBJCXXSRCS+= $(OSX_DIR)/miniAudicleController.mm \
	$(OSX_DIR)/miniAudicleVMMonitor.mm \
	$(OSX_DIR)/miniAudicleDocument.mm \
    $(OSX_DIR)/miniAudicleConsoleMonitor.mm \
	$(OSX_DIR)/miniAudicleShellController.mm  \
	$(OSX_DIR)/mAConsoleMonitorView.mm \
    $(OSX_DIR)/NumberedTextView.mm \
	$(OSX_DIR)/miniAudicleShellTextView.mm \
    $(OSX_DIR)/miniAudicle_ui_elements.mm \
	$(OSX_DIR)/miniAudiclePreferencesController.mm \
	$(OSX_DIR)/mABrowserController.mm \
    $(OSX_DIR)/mASyntaxHighlighter.mm \
	$(OSX_DIR)/mAChuginManager.mm

COBJS=$(CSRCS:.c=.o)
CXXOBJS=$(CXXSRCS:.cpp=.o)
OBJCOBJS=$(OBJCSRCS:.m=.o)
OBJCXXOBJS=$(OBJCXXSRCS:.mm=.o)
OBJS=$(COBJS) $(CXXOBJS) $(OBJCOBJS) $(OBJCXXOBJS)

# place all images in macosx/icon here
IMAGES=led-red.png led-green.png led-blue.png led-off.png \
       add.png remove.png replace.png removeall.png removelast.png error.png \
       miniAudicle.icns ck.icns Thumb9.png lock.png

IMAGES:=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Resources/,$(IMAGES))

BUNDLE_DATA=Info.plist PkgInfo

BUNDLE_DATA:=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/,$(BUNDLE_DATA))

NIBS_BASE=miniAudicle miniAudicleDocument
XIBS=$(addprefix $(OSX_DIR)/$(LANGUAGE).lproj/,$(addsuffix .xib,$(NIBS_BASE)))
NIBS=$(addprefix $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/,$(addsuffix .nib,$(NIBS_BASE)) InfoPlist.strings)

.PHONY: miniAudicle
miniAudicle: $(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle $(IMAGES) $(NIBS) $(BUNDLE_DATA)

$(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle: $(OBJS) chuck
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/MacOS/
	$(CXX) -o $(BIN_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle $(OBJS) $(CHUCK_OBJS) $(LDFLAGS) $(ARCHOPTS)

$(IMAGES): $(BIN_DIR)/miniAudicle.app/Contents/Resources/%: $(OSX_DIR)/icon/% 
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/
	cp $< $@
	touch $(BIN_DIR)/miniAudicle.app

$(BUNDLE_DATA): $(BIN_DIR)/miniAudicle.app/Contents/%: $(OSX_DIR)/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/
	cp $< $@
	touch $(BIN_DIR)/miniAudicle.app

$(filter %.strings,$(NIBS)): $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/%: $(OSX_DIR)/$(LANGUAGE).lproj/%
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/
	cp $< $@

$(filter %.nib,$(NIBS)): $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/%.nib: $(OSX_DIR)/$(LANGUAGE).lproj/%.xib
	mkdir -p $(BIN_DIR)/miniAudicle.app/Contents/Resources/$(LANGUAGE).lproj/
	ibtool --errors --warnings --notices --output-format human-readable-text --compile $@ $<
#    --sdk /Developer/SDKs/MacOSX10.6.sdk

# build the core chuck code
.PHONY: chuck
chuck:
#	echo $(CHUCK_SRCS) &> /dev/null
	ARCHS='$(ARCHS)' make -C $(CHUCK_SRC_DIR) osx

# now build miniAudicle files
$(COBJS): %.o: %.c
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(CXXOBJS): %.o: %.cpp
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(OBJCOBJS): %.o: %.m
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d

$(OBJCXXOBJS): %.o: %.mm
	$(CXX) $(CFLAGS) $(ARCHOPTS) -c $< -o $@
	@$(CXX) -MM $(CFLAGSDEPEND) $< > $*.d


.PHONY: clean
clean: 
	rm -rf *.o $(OSX_DIR)/*.o $(BIN_DIR)/miniAudicle.app $(DIST_DIR).dmg

.PHONY: clean-all
clean-all: 
	rm -rf *.o $(OSX_DIR)/*.o $(BIN_DIR)/miniAudicle.app $(DIST_DIR).dmg
	make -C $(CHUCK_SRC_DIR) clean

.PHONY: install
install: miniAudicle
	cp -rf $(BIN_DIR)/miniAudicle.app $(INSTALL_DIR)/

.PHONY: dist
dist: miniAudicle
	rm -rf $(DIST_DIR) miniAudicle-$(VERSION).dmg
	mkdir $(DIST_DIR)
	mkdir $(DIST_DIR)/documentation
	mkdir $(DIST_DIR)/documentation/images
	mkdir $(DIST_DIR)/documentation/examples
	mkdir $(DIST_DIR)/documentation/examples/ui
	ln -s documentation/examples $(DIST_DIR)/
	cp -r $(BIN_DIR)/miniAudicle.app $(NOTES) $(DIST_DIR)/
#	strip -u -r $(DIST_DIR)/miniAudicle.app/Contents/MacOS/miniAudicle
	cp -r $(DOCS) $(DIST_DIR)/documentation/
	cp -r $(DOC_IMAGES) $(DIST_DIR)/documentation/images/
	cp -r $(EXAMPLES) $(DIST_DIR)/documentation/examples/ui
	cp -r $(CHUCK_SRC_DIR)/examples/* $(DIST_DIR)/documentation/examples/
#	make -C $(CHUCK_MANUAL_DIR) > /dev/null
	cp -r $(CHUCK_MANUAL) $(DIST_DIR)/documentation/
	rm -rf `find $(DIST_DIR)/ -name .DS_Store` `find $(DIST_DIR)/ -name .svn`
	hdiutil create -srcfolder $(DIST_DIR) miniAudicle-$(VERSION).dmg -format UDZO -imagekey zlib-level=9
	rm -r $(DIST_DIR)/
